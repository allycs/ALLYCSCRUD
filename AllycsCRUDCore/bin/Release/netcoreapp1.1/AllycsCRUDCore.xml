<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AllycsCRUDCore</name>
    </assembly>
    <members>
        <member name="T:Dapper.AllycsCRUD">
            <summary>
            Dapper.AllycsCRUD
            </summary>
            <summary>
            Dapper.AllycsCRUD
            </summary>
        </member>
        <member name="M:Dapper.AllycsCRUD.Get``1(System.Data.IDbConnection,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>自定义表名为空或者null取默认表名称</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>默认过滤器为Id字段</para>
            <para>-Id字段可以使用 [Key] 标签设定使用字段</para>
            <para>支持事物和命令超时设定</para>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="connection">自连接</param>
            <param name="tableName">表名</param>
            <param name="id">主键</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回T类型的单实例</returns>
        </member>
        <!-- 对于成员“M:Dapper.AllycsCRUD.GetList``1(System.Data.IDbConnection,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Dapper.AllycsCRUD.GetList``1(System.Data.IDbConnection,System.String,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Dapper.AllycsCRUD.GetListPaged``1(System.Data.IDbConnection,System.Int32,System.Int32,System.String,System.String,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})”忽略有格式错误的 XML 注释 -->
        <member name="M:Dapper.AllycsCRUD.Insert(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>插入一条数据到数据库（支持简单类型）</para>
            <para>默认类名一致的表名</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>插入的主键属性为Id或者带有[Key]标签的属性名</para>
            <para>带有 [Editable(false)]标签或者复杂的类型将会被忽略</para>
            <para>支持事物和命令超时设定</para>
            <para>返回主键Id或者自动生成的主键值</para>
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <param name="connection">自连接</param>
            <param name="tableName">表名</param>
            <param name="entityToInsert">插入的实体对象</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回主键Id或者自动生成的主键值</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.Insert``1(System.Data.IDbConnection,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>插入一条数据到数据库（支持简单类型）</para>
            <para>自定义表名为空或者null取默认表名称</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>插入的主键属性为Id或者带有[Key]标签的属性名</para>
            <para>带有 [Editable(false)]标签或者复杂的类型将会被忽略</para>
            <para>支持事物和命令超时设定</para>
            <para>返回主键Id或者自动生成的主键值</para>
            </summary>
            <typeparam name="TKey">主键类型</typeparam>
            <param name="connection">自连接</param>
            <param name="tableName">表名</param>
            <param name="entityToInsert">插入的实体对象</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回主键Id或者自动生成的主键值</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>插入一条数据到数据库（包含主键全插入生成）</para>
            <para>默认类名对应的表名</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="connection">自连接</param>
            <param name="entity">插入的数据对象</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.Insert``1(System.Data.IDbConnection,System.String,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>插入一条数据到数据库（包含主键全插入生成）</para>
            <para>自定义表名为空或者null取默认表名称</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="connection">自连接</param>
            <param name="tableName">表名</param>
            <param name="entity">插入的数据对象</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.Update(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>更新一条或多条数据到数据库</para>
            <para>默认类名一致的表名</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>更新Id或者带有[Key]标签的属性的值一致的对象</para>
            <para>带有 [Editable(false)]标签或者复杂的类型将会被忽略</para>
            <para>支持事物和命令超时设定</para>
            <para>返回影响的行数</para>
            </summary>
            <param name="connection">自连接</param>
            <param name="entityToUpdate">更新对象</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.Update(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>更新一条或多条数据到数据库</para>
            <para>自定义表名为空或者null取默认表名称</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>更新Id或者带有[Key]标签的属性的值一致的对象</para>
            <para>带有 [Editable(false)]标签或者复杂的类型将会被忽略</para>
            <para>支持事物和命令超时设定</para>
            <para>返回影响的行数</para>
            </summary>
            <param name="connection">自连接</param>
            <param name="tableName">表名</param>
            <param name="entityToUpdate">更新对象</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.Delete``1(System.Data.IDbConnection,System.String,``0,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>删除一条或者多条数据符合传入的对象</para>
            <para>-自定义表名为空或者null取默认表名称</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>支持事物和命令超时设定</para>
            <para>返回影响的行数</para>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="connection">自连接</param>
            <param name="tableName">表名</param>
            <param name="entityToDelete">实体对象</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.Delete``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>根据Id删除相应的数据（联合主键取第一个）</para>
            <para>-自定义表名为空或者null取默认表名称</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>支持事物和命令超时设定</para>
            <para>返回影响的行数</para>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="connection">自连接</param>
            <param name="tableName">表名</param>
            <param name="id">主键</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.DeleteList``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>删除符合whereConditions的一系列数据</para>
            <para>-默认类名一致的表名</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>whereConditions 使用方式: new {Category = 1, SubCategory=2} -非必须</para>
            <para>返回影响的行数</para>
            <para>支持事物和命令超时设定</para>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="connection">自连接</param>
            <param name="whereConditions"></param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.DeleteList``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>删除符合whereConditions的一系列数据</para>
            <para>-自定义表名为空或者null取默认表名称</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>whereConditions 使用方式: new {Category = 1, SubCategory=2} -非必须</para>
            <para>返回影响的行数</para>
            <para>支持事物和命令超时设定</para>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="connection">自连接</param>
            <param name="tableName">表名</param>
            <param name="whereConditions"></param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.DeleteList``1(System.Data.IDbConnection,System.String,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>删除符合过滤条件的一系列数据</para>
            <para>-自定义表名为空或者null取默认表名称</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>conditions 使用方式: "WHERE name='bob'" or "WHERE age>=@Age" -非必须</para>
            <para>parameters 使用方式: new { Age = 15 } -非必须</para>
            <para>返回影响的行数</para>
            <para>支持事物和命令超时设定</para>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="connection">自连接</param>
            <param name="tableName">表名</param>
            <param name="conditions">SqlWhere条件</param>
            <param name="parameters">参数化</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.RecordCount``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>默认统计数据条数</para>
            <para>-自定义表名为空或者null取默认表名称</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>返回影响的行数</para>
            <para>支持事物和命令超时设定</para>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="connection">自连接</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.RecordCount``1(System.Data.IDbConnection,System.String,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>根据过滤条件统计数据条数</para>
            <para>-自定义表名为空或者null取默认表名称</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>conditions 使用方式: "WHERE name='bob'" or "WHERE age>=@Age" -非必须</para>
            <para>parameters 使用方式: new { Age = 15 } -非必须</para>
            <para>返回影响的行数</para>
            <para>支持事物和命令超时设定</para>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="connection">自连接</param>
            <param name="tableName">表名</param>
            <param name="conditions">SqlWhere条件</param>
            <param name="parameters">参数化</param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.RecordCount``1(System.Data.IDbConnection,System.Object,System.String,System.Data.IDbTransaction,System.Nullable{System.Int32})">
            <summary>
            <para>根据过滤条件统计数据条数</para>
            <para>-自定义表名为空或者null取默认表名称</para>
            <para>-表名可以用在类名上加入 [Table("你的表名")]标签的方式重写</para>
            <para>whereConditions 使用方式: new {Category = 1, SubCategory=2} -非必须</para>
            <para>返回影响的行数</para>
            <para>支持事物和命令超时设定</para>
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="connection">自连接</param>
            <param name="tableName">表名</param>
            <param name="whereConditions"></param>
            <param name="transaction">事物</param>
            <param name="commandTimeout">超时</param>
            <returns>返回影响的行数</returns>
        </member>
        <member name="F:Dapper.AllycsCRUD._isUpToLow">
            <summary>
            表名、属性名是否大小写转换（小写时候以下划线分词，类名：AaBb=>aa_bb）
            </summary>
        </member>
        <member name="F:Dapper.AllycsCRUD._encapsulation">
            <summary>
            对应数据元素封装方式
            </summary>
        </member>
        <member name="F:Dapper.AllycsCRUD._getIdentitySql">
            <summary>
            对应数据库自增主键获取的sql脚本
            </summary>
        </member>
        <member name="F:Dapper.AllycsCRUD._getPagedListSql">
            <summary>
            对应数据库分页的sql脚本
            </summary>
        </member>
        <member name="F:Dapper.AllycsCRUD.TableNames">
            <summary>
            存储表名的键值对（字典类型）
            </summary>
        </member>
        <member name="F:Dapper.AllycsCRUD.ColumnNames">
            <summary>
             存储字段名的键值对（字典类型）
            </summary>
        </member>
        <member name="M:Dapper.AllycsCRUD.SetDBType(Dapper.DBType,System.Boolean)">
            <summary>
            设置数据库类型
            </summary>
            <param name="dialect">数据库类型</param>
            <param name="isUpToLow">表名、属性名是否区分大小写（小写时候以下划线分词，类名：AaBb=>aa_bb）</param>
        </member>
        <member name="M:Dapper.AllycsCRUD.SetTableNameResolver(Dapper.AllycsCRUD.ITableNameResolver)">
            <summary>
            设置表名解析器
            </summary>
            <param name="resolver">在请求表名格式时使用解析器</param>
        </member>
        <member name="M:Dapper.AllycsCRUD.SetColumnNameResolver(Dapper.AllycsCRUD.IColumnNameResolver)">
            <summary>
            设置列名解析器
            </summary>
            <param name="resolver">在请求列名格式时使用解析器</param>
        </member>
        <member name="M:Dapper.AllycsCRUD.BuildUpdateSet(System.Object,System.Text.StringBuilder)">
            <summary>
            创建update参数可变字符串（a=1 ， b=2）
            </summary>
            <param name="entityToUpdate">实体对象</param>
            <param name="sb">update语句可变字符串</param>
        </member>
        <member name="M:Dapper.AllycsCRUD.BuildSelect(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            创建select 展示的属性字段不包含带有IgnoreSelect和NotMapped标签的属性
            </summary>
            <param name="sb"></param>
            <param name="props"></param>
        </member>
        <member name="M:Dapper.AllycsCRUD.BuildInsertValues(System.Object,System.Text.StringBuilder)">
            <summary>
            创建INSERT插入值的sql语句包含所有的属性的对应值除了
            以Id命名的属性
            带有Editable(false)标签
            带有Key标签但是不带有Required标签
            带有IgnoreInsert标签
            带有NotMapped标签
            </summary>
            <param name="entityToInsert"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Dapper.AllycsCRUD.BuildInsertParameters(System.Object,System.Text.StringBuilder)">
            <summary>
            创建INSERT语句参数不包含
            带有Editable(false)的标签
            带有Key的标签
            带有NotMapped的标签
            以Id命名的
            属性
            </summary>
            <param name="entityToInsert"></param>
            <param name="sb"></param>
        </member>
        <member name="M:Dapper.AllycsCRUD.GetAllProperties(System.Object)">
            <summary>
            获取实体对象的所有属性名
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <!-- 对于成员“M:Dapper.AllycsCRUD.GetScaffoldableProperties(System.Object)”忽略有格式错误的 XML 注释 -->
        <member name="M:Dapper.AllycsCRUD.IsEditable(System.Reflection.PropertyInfo)">
            <summary>
            如果属性具有AllowEdit标签则返回它的boolean值
            </summary>
            <param name="pi"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.IsReadOnly(System.Reflection.PropertyInfo)">
            <summary>
            如果属性具有IsReadOnly标签则返回它的boolean值
            </summary>
            <param name="pi">属性信息</param>
            <returns>IsReadOnly的boolean值</returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.GetUpdateableProperties(System.Object)">
            <summary>
            获取所有属性名不包含
            以Id命名的
            带有Key标签的
            带有ReadOnly标签的
            带有IgnoreInsert标签的
            带有NotMappe标签的
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.GetIdProperties(System.Object)">
            <summary>
            获取所有以Id命名的属性或者带有[Key]标签的属性
            因为INSERT和update 操作传入的是一个实体对象因此该方法是必须的
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.GetAllProperties``1(``0)">
            <summary>
            获取对象的所有属性
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="entity">实体对象</param>
            <returns></returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.GetScaffoldableProperties``1">
            <summary>
            获取T类型所有不带有Editable（false）标签的属性
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.GetIdProperties(System.Type)">
            <summary>
            获取所有属性带有[Key]标签或者以Id命名的属性
            为：Get(id) 和 Delete(id)方法提供获取主键。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.GetTableName(System.Object)">
            <summary>
            通过对象获取表名
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.GetTableName(System.Type)">
            <summary>
            通过类型获取表名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.GetFieldNameByUpperToLower(System.String)">
            <summary>
            按照大写转为以"_"关联的小写
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.AllycsCRUD.SequentialGuid">
            <summary>
            基于当前日期时间生成一个GUID
            http://stackoverflow.com/questions/1752004/sequential-guid-generator-c-sharp
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dapper.ColumnAttribute">
            <summary>
            可选的列属性
            </summary>
        </member>
        <member name="M:Dapper.ColumnAttribute.#ctor(System.String)">
            <summary>
            可选的列属性
            </summary>
            <param name="columnName"></param>
        </member>
        <member name="P:Dapper.ColumnAttribute.Name">
            <summary>
            列名称
            </summary>
        </member>
        <member name="T:Dapper.ConnectionManage">
            <summary>
            数据库连接管理类
            </summary>
        </member>
        <member name="M:Dapper.ConnectionManage.ConnClose(System.Data.IDbConnection)">
            <summary>
            关闭当前连接
            </summary>
            <param name="connection"></param>
        </member>
        <member name="T:Dapper.DBType">
            <summary>
            支持数据库类型
            </summary>
        </member>
        <member name="T:Dapper.DynamicBuilder`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Dapper.DynamicBuilder`1.Build(System.Data.IDataRecord)">
            <summary>
            </summary>
            <param name="dataRecord"></param>
            <returns></returns>
        </member>
        <member name="M:Dapper.DynamicBuilder`1.CreateBuilder(System.Data.IDataRecord)">
            <summary>
            </summary>
            <param name="dataRecord"></param>
            <returns></returns>
        </member>
        <member name="T:Dapper.Populate">
            <summary>
            </summary>
        </member>
        <member name="M:Dapper.Populate.GetSingle``1(System.Data.IDataReader)">
            <summary>
            </summary>
            <param name="dr"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Dapper.Populate.GetList``1(System.Data.IDataReader)">
            <summary>
            </summary>
            <param name="dr"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Dapper.ReadOnlyAttribute">
            <summary>
            可选的制度标签
            你可以在system.componentmodel 指定属性上设置是否可编辑
            </summary>
        </member>
        <member name="M:Dapper.ReadOnlyAttribute.#ctor(System.Boolean)">
            <summary>
            属性制度标签
            </summary>
            <param name="isReadOnly"></param>
        </member>
        <member name="P:Dapper.ReadOnlyAttribute.IsReadOnly">
            <summary>
            数据库是否沿用此属性标签
            </summary>
        </member>
        <member name="T:Dapper.TableAttribute">
            <summary>
            可选的表标签
            </summary>
        </member>
        <member name="M:Dapper.TableAttribute.#ctor(System.String)">
            <summary>
            可选的表标签
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="P:Dapper.TableAttribute.Name">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Dapper.TableAttribute.Schema">
            <summary>
            结构名称
            </summary>
        </member>
    </members>
</doc>
